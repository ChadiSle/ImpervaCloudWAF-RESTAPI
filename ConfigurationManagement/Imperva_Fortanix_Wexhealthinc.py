import requests
import json

hsmCertificate = "hsmCertificate"
api_url = "https://my.imperva.com/api/prov/v2/sites"
headers = {
    "Content-Type": "application/json",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "x-api-id": "",
    "x-api-key": ""
    
}

site_ids = []
kill_input = ""
print("Please provide the site ids you wish to add this certificate too :" "\n")

while True:
    line = input()
    if line == kill_input:
        break
    site_ids.extend(line.strip().split(","))

print(site_ids)

for site_id in site_ids:

    data = {
  "data": {
    "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUcxakNDQmI2Z0F3SUJBZ0lRVU8xMXMwMUZpLzEzY0FSeFoxWmVQekFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKdWpFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBb1REVVZ1ZEhKMWMzUXNJRWx1WXk0eEtEQW1CZ05WQkFzVApIMU5sWlNCM2QzY3VaVzUwY25WemRDNXVaWFF2YkdWbllXd3RkR1Z5YlhNeE9UQTNCZ05WQkFzVE1DaGpLU0F5Ck1ERXlJRVZ1ZEhKMWMzUXNJRWx1WXk0Z0xTQm1iM0lnWVhWMGFHOXlhWHBsWkNCMWMyVWdiMjVzZVRFdU1Dd0cKQTFVRUF4TWxSVzUwY25WemRDQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVNBdElFd3hTekFlRncweQpNakE1TVRNeU1EQXlNakphRncweU16RXdNVE15TURBeU1qRmFNRzB4Q3pBSkJnTlZCQVlUQWxWVE1SUXdFZ1lEClZRUUlFd3REYjI1dVpXTjBhV04xZERFUk1BOEdBMVVFQnhNSVUybHRjMkoxY25reEdEQVdCZ05WQkFvVEQxZGwKZUNCSVpXRnNkR2dzSUVsdVl6RWJNQmtHQTFVRUF3d1NLaTUzWlhob1pXRnNkR2hwYm1NdVkyOXRNSUlCSWpBTgpCZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFwSmNhbUxqZnQ4dHpFaFQ2SVkzbmVuTzJxWVZaClhuU3o0Qy9YbnNxLzhucjJUejFzeWIrZm9jUzdKeGtEZ2wxTzBZdnl6SWVGb09hU083ekw2Rng3Qmw4dExETWMKZEFZNkI2VWl1RHV0LzRRVHFHbWtseThhZUxlbkhnZXN0YlpJSzVuWDFnZFcxM0l5aVhEUy9HRm0rVVZTWkxhSQpxakhqK08zejUxWG5qclFTb3ZsNzliL0xhL2k2WUUwSU91QzlyMGtTU0sxNmRnU3RuWFpkaGRyOG51enZHVkRUCnN1dzVUSUh3YXlEVGg0bnFieWVzY1Ftb2RhUnpibklEMGxqdGJzOHVaVjBKcVRDMWt0cnk0OGtua1NncExDNEEKRGc4UVovNUxBZ0R2cmhneld6em1KbWU5MEdRZG1KSHB1OUtXeEJ4Mkg4dW94SEJVMHFWRzFYL3J5d0lEQVFBQgpvNElESWpDQ0F4NHdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVTcrN0xrYnlpQ3plNFNPV0luT2RvCnVrTTZFZUF3SHdZRFZSMGpCQmd3Rm9BVWdxSndkTjI4VXovUGU5VDN6WCtuWU1ZS1RMOHdhQVlJS3dZQkJRVUgKQVFFRVhEQmFNQ01HQ0NzR0FRVUZCekFCaGhkb2RIUndPaTh2YjJOemNDNWxiblJ5ZFhOMExtNWxkREF6QmdncgpCZ0VGQlFjd0FvWW5hSFIwY0RvdkwyRnBZUzVsYm5SeWRYTjBMbTVsZEM5c01Xc3RZMmhoYVc0eU5UWXVZMlZ5Ck1ETUdBMVVkSHdRc01Db3dLS0Ftb0NTR0ltaDBkSEE2THk5amNtd3VaVzUwY25WemRDNXVaWFF2YkdWMlpXd3gKYXk1amNtd3dMd1lEVlIwUkJDZ3dKb0lTS2k1M1pYaG9aV0ZzZEdocGJtTXVZMjl0Z2hCM1pYaG9aV0ZzZEdocApibU11WTI5dE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCCkJRVUhBd0l3VEFZRFZSMGdCRVV3UXpBM0JncGdoa2dCaHZwc0NnRUZNQ2t3SndZSUt3WUJCUVVIQWdFV0cyaDAKZEhCek9pOHZkM2QzTG1WdWRISjFjM1F1Ym1WMEwzSndZVEFJQmdabmdRd0JBZ0l3Z2dGL0Jnb3JCZ0VFQWRaNQpBZ1FDQklJQmJ3U0NBV3NCYVFCMkFGV0IxTUlXa0RZQlN1b0xtMWM4VS9EQTVEaDRjQ1VJRnkranFoMEhFOU1NCkFBQUJnemh5RDA0QUFBUURBRWN3UlFJaEFKRGhnNFMwUDhMb1FqS1lKeWRPMzNpRExjUjg5V1UydmViTHNyT2YKbElhOEFpQTZPdVAycnRWMkg2YVIvdkFYNUdJeXBUYnMyYUlJdDVaaGM0OTRTbWdaT0FCMkFMTnpkd2ZoaEZENApZNGJXQmFuY0VRbEtlUzJ4Wnd3TGg5endBdzU1TnFXYUFBQUJnemh5RDFNQUFBUURBRWN3UlFJZ1RPNlc0M3owCkl6NTN0dEMxT0VqdnZRVzFoWndFS2t2ZGxNYUZqbmViKzFFQ0lRREtGa0ZBMXBxQkc3RHlpbTIwZnBxNFJRS3UKTk1UOVVCeGNiL3F3UGZUM3VRQjNBSzMzdnZwOC94RElpNTA5bkI0K0dHcTBaeWxkejdFTUpNcUZoalRyM0lLSwpBQUFCZ3poeUQwMEFBQVFEQUVnd1JnSWhBSkp3K3RsenZHRGxkVm84Wk94YnpEdy9ET2ExT0pIcFh6dVprRmk5Ck41QUhBaUVBN1RIbmFsK25wS2JPVEN2M1B3QXA4R0pmVWNRaXY2Q2Nqb1M0elZ2U2JGOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUpxUEQzcnh2SXRWWmFrYlk0c2dMWnVDc1llUW02dURMbzBFeDhjUzBuRG8vclBla0MxLworejdKQ0JoUTVWRk5HalRqTXBrYnNvNUc3YzlYWmpCc1lyNFNjb2RXVlhvTlVvVDN4bWlpNXNTUEFKT2N2L05lCnhDNDJuYlpsSDI5aWVWZE4vejR1U3pmQ3JITlo3bzI1QTlTbVhkSXpKa1BIYTQxNVhLNlYyTE9lYUxOSFphTXQKWFRZVk42bDhQdXlRR1k3YVErbnpQTDlEcGIrR1piR29La0toc1lDRXp5OThpRDNUZnpDeFZWK01sSmpEeWhBaApHbks1NjZsSEV5TDE4Ulh1RXJmczhDL21INjFsSDc3dytlVUVwL3g0V3JrWE1OSDlsdFFNMExsTmlnZncrWGgzCkxuRWV6MEY3NVBBQlA4ejdPekVUOWRSSHIyS2FJMFh2OEhnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGRGpDQ0EvYWdBd0lCQWdJTUR1bE13d0FBQUFCUjAzZUZNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JRytNUXN3CkNRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5SVzUwY25WemRDd2dTVzVqTGpFb01DWUdBMVVFQ3hNZlUyVmwKSUhkM2R5NWxiblJ5ZFhOMExtNWxkQzlzWldkaGJDMTBaWEp0Y3pFNU1EY0dBMVVFQ3hNd0tHTXBJREl3TURrZwpSVzUwY25WemRDd2dTVzVqTGlBdElHWnZjaUJoZFhSb2IzSnBlbVZrSUhWelpTQnZibXg1TVRJd01BWURWUVFECkV5bEZiblJ5ZFhOMElGSnZiM1FnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dMU0JITWpBZUZ3MHgKTlRFd01EVXhPVEV6TlRaYUZ3MHpNREV5TURVeE9UUXpOVFphTUlHNk1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRRwpBMVVFQ2hNTlJXNTBjblZ6ZEN3Z1NXNWpMakVvTUNZR0ExVUVDeE1mVTJWbElIZDNkeTVsYm5SeWRYTjBMbTVsCmRDOXNaV2RoYkMxMFpYSnRjekU1TURjR0ExVUVDeE13S0dNcElESXdNVElnUlc1MGNuVnpkQ3dnU1c1akxpQXQKSUdadmNpQmhkWFJvYjNKcGVtVmtJSFZ6WlNCdmJteDVNUzR3TEFZRFZRUURFeVZGYm5SeWRYTjBJRU5sY25ScApabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVJQzBnVERGTE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTJqK1cwRTI1TDBUbjJ6bGVtMUR1WEtWaDJrRm5Vd21xQUpxT1YzOHBhOXZINFNFa3FqclEKalVjajB1MXlGdkNSSWRKZHQ3aExxSU9QdDVFeWFNL09KWk1zc24yWHlQN0J0QmU2Q1o0RGtKTjdmRW1ESW1pSwptOTVId3pHWWVpNTlRQXZTN3o3VHNveXFqMGlwL3dEb0tWZ0c5N2FUV3BSekppYXRXQTdsUXJqVjZuTjVaR2hUCkpiaUV6NVI2cmdaRkRLTnJUZERHdnVvWXBEYndrcks2SElpUE9sSi85MTV0Z3h5ZDhCL2x3OWJkcFhpU1BiQnQKTE9ySno1UkJHWEZFYUxwSFBBVHBYYm8rOERYM0ZiYWU4aTRWSGo5SHlNZzRwM05GWFUyd083R09GeWszNnQwRgpBU0s3bERZcWpWczEvbE1aTHdoR3dTcXpHbUlkVGl2Wkd3SURBUUFCbzRJQkREQ0NBUWd3RGdZRFZSMFBBUUgvCkJBUURBZ0VHTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd013WUlLd1lCQlFVSEFRRUVKekFsTUNNR0NDc0cKQVFVRkJ6QUJoaGRvZEhSd09pOHZiMk56Y0M1bGJuUnlkWE4wTG01bGREQXdCZ05WSFI4RUtUQW5NQ1dnSTZBaApoaDlvZEhSd09pOHZZM0pzTG1WdWRISjFjM1F1Ym1WMEwyY3lZMkV1WTNKc01Ec0dBMVVkSUFRME1ESXdNQVlFClZSMGdBREFvTUNZR0NDc0dBUVVGQndJQkZocG9kSFJ3T2k4dmQzZDNMbVZ1ZEhKMWMzUXVibVYwTDNKd1lUQWQKQmdOVkhRNEVGZ1FVZ3FKd2ROMjhVei9QZTlUM3pYK25ZTVlLVEw4d0h3WURWUjBqQkJnd0ZvQVVhbkltZXRBZQo3MzNuTzJsUjFHeU5uNUFTWnFzd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEblZqcGlEWWNnc1k5TndIUmt3CnkvWUpyTXhwMWNuY04wSHlNZy92ZE1OWTluZ25DVFFJbFpJdjE5KzRvLzBPZ2Vta25OTS9UV2dyRlRFS0ZjeFMKQkpQb2sxREQyYkhpNFdpM09nbDA4VFJZQ2o5M21FQzQ1bWovWGVUSVJzWHNnZGZKZ2hoY2c4NXgyTHkvckprQwprOXVVbUlUU25LYTEvbHk3OEVxdklhekNQMGtrWjlZdWpzK3N6R1FWR0hMbGJIZlRVcWk1M1kyc0FFbzFHZFJ2CmM2TjE3MnRrdytDTmd4S2hpdWNPaGszWXRDQWJ2bXFsakV0b1p1TXJ4MWdMKzFZUTFKSDdIZE14V0JDTVJPTjEKZXhDZHRUaXg5cXJLZ1dSczZQTGlnVldYVVgvaHdpZFFvc2s4V3dCRDlsdTUxYVg4L3dkUVFHY0hzRlh3dDM1dQpMY3c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVQakNDQXlhZ0F3SUJBZ0lFU2xPTUtEQU5CZ2txaGtpRzl3MEJBUXNGQURDQnZqRUxNQWtHQTFVRUJoTUMKVlZNeEZqQVVCZ05WQkFvVERVVnVkSEoxYzNRc0lFbHVZeTR4S0RBbUJnTlZCQXNUSDFObFpTQjNkM2N1Wlc1MApjblZ6ZEM1dVpYUXZiR1ZuWVd3dGRHVnliWE14T1RBM0JnTlZCQXNUTUNoaktTQXlNREE1SUVWdWRISjFjM1FzCklFbHVZeTRnTFNCbWIzSWdZWFYwYUc5eWFYcGxaQ0IxYzJVZ2IyNXNlVEV5TURBR0ExVUVBeE1wUlc1MGNuVnoKZENCU2IyOTBJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNUlDMGdSekl3SGhjTk1Ea3dOekEzTVRjeQpOVFUwV2hjTk16QXhNakEzTVRjMU5UVTBXakNCdmpFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBb1REVVZ1CmRISjFjM1FzSUVsdVl5NHhLREFtQmdOVkJBc1RIMU5sWlNCM2QzY3VaVzUwY25WemRDNXVaWFF2YkdWbllXd3QKZEdWeWJYTXhPVEEzQmdOVkJBc1RNQ2hqS1NBeU1EQTVJRVZ1ZEhKMWMzUXNJRWx1WXk0Z0xTQm1iM0lnWVhWMAphRzl5YVhwbFpDQjFjMlVnYjI1c2VURXlNREFHQTFVRUF4TXBSVzUwY25WemRDQlNiMjkwSUVObGNuUnBabWxqCllYUnBiMjRnUVhWMGFHOXlhWFI1SUMwZ1J6SXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRQzZoTFp5MjU0TWErS1o2VEFCcDNicU1yaVZRUnJKMm1GT1dITFAvdmFDZWI5ellRWUtwU2ZZczEvVApSVTRjY3RaT012SnlpZy8zZ3huUWFvQ0FBRVVlc01mbm1yOFNWeWNjbzJndkNvZTlhbXNPWG1YekhIZlYxSVdOCmNDRzBzekxuaTZMVmhqa0NzYmpTUjg3a3lVbkVPNmZlKzFSOVY3N3c2RzdDZWJJNkMxWGlVSmdXTWhOY0wzaFcKd2NLVXMvSmE1Q2VhbnlUWHh1elFteVdDNDh6Q3hFWEZqSmQ2Qm1zcUVaK3BDbTVJTzIvYjFCRVpRdmVQQjcvMQpVMStjUHZRWExPWnByRTR5VEdKMzZyZm81YnMwdkJtTHJweFI1N2QrdFZPeE15TGxiYzl3UEJyNjRwdG50b1AwCmphV3ZZa3hONEZpc1pEUVNBL2kyalpSakpLUnhBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVAKQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJxY2laNjBCN3ZmZWM3YVZIVWJJMmZrQkptcXpBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFlWjhkbHNhMmVUOGlqWWZUaHdNRVlHcHJtaTVaaVhNUnJFUFI5UlAvCmpUa3J3UEs5VDNDTXFTL3FGOFFMVko3VUc1YVlNenlvcldLaUFIYXJXV2x1QmgxK3hMbEVqWml2RXRSaDJ3b1oKUmtmejYvZGp3VUFGUUtYU3QvUzFtamEvcVloMmlBUlZCQ3VjaDM4YU56eCtMYVVhMk5TSlhzcTlyRDFzMkcydgoxZk4yRDgwN2lEZ2luV3lUbXNROXY0SWJaVCttRDEycS9PV3lGY3ExcmNhOFBkQ0U2T29HY3JCTk9USjR2ejRSCm5BdWtuWm9oOC9DYkN6QjQyOEhjaDBQK3ZHT2F5c1hDSE1uSGpmODdFbGdJNXJZOTdIb3NUdnVEbHM0TVBHbUgKVkhPa2M4S1QvMUVRckJWVUFkajhCYkdKb1g5MGc1cEoxOXhPZTRwSWI0dEY5Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
    "hsmDetails": [
      {
        "keyId": "18ff1f5b-46a8-4661-9639-eae6f5de74ff",
        "apiKey": "ZTMyNDFmY2MtZTc3YS00ZDNjLWE3OTktNzc0MmU4NWUzMTdjOmd3LWZyWVZsRlNraVIzNVVhTmE3ZDdlV1dsbloyZktmeVVJd0ROVVFoSzZEXzhiRzQ5V3RTY0l2MTZBcXZ2amowOFAwNnFFMEMyM09WRkdVa3NRUElB",
        "hostName": "api.amer.smartkey.io"
      }
    ]
  }
}

    api_enpoint = f"{api_url}/{site_id}/{hsmCertificate}"
    
    response = requests.put(api_enpoint, headers=headers, data=json.dumps(data), verify=False)

    print(f"Site ID {site_id} response status code: {response.status_code}")
